<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Create Date:2012-05-03 09:53:47
	MapperTemplate:com.smartken.toyz4j.mybatis.OracleMapperTemplate
	Model:com.ett.visual.model.admin.DictTypeModel 


--> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ett.visual.mapper.admin.IDictTypeMapper">

<sql id="table">VIS_ADMIN_DICT_TYPE</sql>

<sql id="pk">id</sql>

<sql id="columns">
main.ID,main.TEXT,main.REMARK
</sql>
<sql id="queryCols">
		<choose>
			<when test="dynamic eq null or dynamic['colums'] eq null or dynamic['colums'].size lt 1 " >
				<include refid="columns"/>
			</when>
			<otherwise>
				<foreach collection="dynamic.colums" item="col" separator=","  >
					 main.${col.column} 
				</foreach>
			</otherwise>
		</choose>
</sql>


<sql id="orderby">
		<choose>
			<when test="dynamic eq null or  dynamic['orderbyBounds'] eq null or dynamic['orderbyBounds'].size lt 1 ">
				order by  <include refid="pk" /> DESC
			</when>
			<otherwise >
				<foreach collection="dynamic.orderbyBounds" item="ob" open=" order by " separator="," >
					 main.${ob.column} ${ob.order} 
				</foreach>
			</otherwise>
		</choose>
</sql>


<resultMap type="com.ett.visual.model.admin.DictTypeModel" id="resultMap">
 <id column="ID"  property="Id" jdbcType="VARCHAR"  />
<result column="TEXT"  property="Text" jdbcType="VARCHAR"  />
<result column="REMARK"  property="Remark" jdbcType="VARCHAR"  />

 </resultMap>


<sql id="selectCondition">
<if test=" 1 eq 1 and condition['Id'] neq null">and main.ID = #{condition.Id } </if> 
<if test=" 1 eq 1 and condition['eqId'] neq null">and main.ID = #{condition.eqId } </if> 
<if test=" 1 eq 1 and condition['neqId'] neq null">and main.ID != #{condition.neqId } </if> 
<if test=" 1 eq 1 and condition['isnullId'] neq null and condition['isnullId'] eq true">and main.ID is null  </if> 
<if test=" 1 eq 1 and condition['isnotnullId'] neq null and condition['isnotnullId'] eq true">and main.ID is not null </if> 
<if test=" 1 eq 1 and condition['isinId'] neq null and  condition['isinId'] neq null and condition['isinId'].size>0">and main.ID in (<foreach collection="condition.isinId" item="sub"  separator="," > #{sub } </foreach> )</if> 
<if test=" 1 eq 1 and condition['isnotinId'] neq null and  condition['isnotinId'] neq null and condition['isnotinId'].size>0">and main.ID not in (<foreach collection="condition.isnotinId" item="sub"  separator="," > #{sub } </foreach> )</if> 
<if test=" 1 eq 1 and condition['likeId'] neq null">and main.ID like #{condition.likeId} </if> 
<if test=" 1 eq 1 and condition['notlikeId'] neq null">and main.ID not like #{condition.notlikeId  } </if> 

<if test=" 1 eq 1 and condition['Text'] neq null">and main.TEXT = #{condition.Text } </if> 
<if test=" 1 eq 1 and condition['eqText'] neq null">and main.TEXT = #{condition.eqText } </if> 
<if test=" 1 eq 1 and condition['neqText'] neq null">and main.TEXT != #{condition.neqText } </if> 
<if test=" 1 eq 1 and condition['isnullText'] neq null and condition['isnullText'] eq true">and main.TEXT is null  </if> 
<if test=" 1 eq 1 and condition['isnotnullText'] neq null and condition['isnotnullText'] eq true">and main.TEXT is not null </if> 
<if test=" 1 eq 1 and condition['isinText'] neq null and  condition['isinText'] neq null and condition['isinText'].size>0">and main.TEXT in (<foreach collection="condition.isinText" item="sub"  separator="," > #{sub } </foreach> )</if> 
<if test=" 1 eq 1 and condition['isnotinText'] neq null and  condition['isnotinText'] neq null and condition['isnotinText'].size>0">and main.TEXT not in (<foreach collection="condition.isnotinText" item="sub"  separator="," > #{sub } </foreach> )</if> 
<if test=" 1 eq 1 and condition['likeText'] neq null">and main.TEXT like #{condition.likeText} </if> 
<if test=" 1 eq 1 and condition['notlikeText'] neq null">and main.TEXT not like #{condition.notlikeText  } </if> 

<if test=" 1 eq 1 and condition['Remark'] neq null">and main.REMARK = #{condition.Remark } </if> 
<if test=" 1 eq 1 and condition['eqRemark'] neq null">and main.REMARK = #{condition.eqRemark } </if> 
<if test=" 1 eq 1 and condition['neqRemark'] neq null">and main.REMARK != #{condition.neqRemark } </if> 
<if test=" 1 eq 1 and condition['isnullRemark'] neq null and condition['isnullRemark'] eq true">and main.REMARK is null  </if> 
<if test=" 1 eq 1 and condition['isnotnullRemark'] neq null and condition['isnotnullRemark'] eq true">and main.REMARK is not null </if> 
<if test=" 1 eq 1 and condition['isinRemark'] neq null and  condition['isinRemark'] neq null and condition['isinRemark'].size>0">and main.REMARK in (<foreach collection="condition.isinRemark" item="sub"  separator="," > #{sub } </foreach> )</if> 
<if test=" 1 eq 1 and condition['isnotinRemark'] neq null and  condition['isnotinRemark'] neq null and condition['isnotinRemark'].size>0">and main.REMARK not in (<foreach collection="condition.isnotinRemark" item="sub"  separator="," > #{sub } </foreach> )</if> 
<if test=" 1 eq 1 and condition['likeRemark'] neq null">and main.REMARK like #{condition.likeRemark} </if> 
<if test=" 1 eq 1 and condition['notlikeRemark'] neq null">and main.REMARK not like #{condition.notlikeRemark  } </if> 


</sql>


<select id="select" resultType="ArrayList" resultMap="resultMap">
	select <include refid="queryCols"/>  from <include refid="table"/>  main   
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
	<include refid="orderby"/>
</select>

<select id="selectUnion" resultType="ArrayList" resultMap="resultMap">
  select  main.* from (
		<foreach collection="conditions" item="condition" separator=" union " >
			<if test="condition neq null" >
				 select <include refid="queryCols"/> from <include refid="table"/>  main 
					<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
						<include refid="selectCondition"/>
					</trim>
			</if>
		</foreach>
   ) main 
<include refid="orderby"/>
</select>

<select id="selectEqPk"  resultMap="resultMap">
	select <include refid="queryCols"/> from <include refid="table"/> main  where main.<include refid="pk"/> = #{pk}
</select>

<select id="selectInPk" resultType="ArrayList" resultMap="resultMap" >
	select <include refid="queryCols"/> from <include refid="table"/> main  where main.<include refid="pk"/> in (
		<foreach item="pk" collection="pks"  separator="," > #{pk} </foreach>
	)
	<include refid="orderby"/>
</select>

<select  id="selectAll"  resultType="ArrayList"  resultMap="resultMap">
	select <include refid="queryCols"/> from  <include refid="table"/> main  
	<include refid="orderby"/>
</select>

<select id="countAll" resultType="int">
	select count(main.<include refid="pk"/>) from <include refid="table"/> main 
</select>

<select id="count" resultType="int">
	select count(main.<include refid="pk"/>) from <include refid="table"/> main 
		<if test="condition neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="avg" resultType="int">
	select avg(main.${colunm}) from <include refid="table"/> main 
		<if test="condition neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="sum" resultType="int">
	select sum(main.${colunm}) from <include refid="table"/> main 
		<if test="condition neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="min" resultType="int">
	select min(main.${colunm}) from <include refid="table"/> main 
		<if test="condition neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="max" resultType="int">
	select max(main.${colunm}) from <include refid="table"/> main 
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<insert id="insert" flushCache="true" >
	insert into <include refid="table"/>  ( ID,TEXT,REMARK ) values  
	<foreach collection="models" separator="," item="model">	(
		<trim  prefixOverrides="," suffixOverrides=",">
			#{model.Id,jdbcType=VARCHAR},
#{model.Text,jdbcType=VARCHAR},
#{model.Remark,jdbcType=VARCHAR},

		</trim>
	)
	</foreach>
</insert>

<update id="update" flushCache="true" >
	update <include refid="table"/>  set 
		<trim  prefixOverrides="," suffixOverrides=",">
			<if test="pk neq null">id=#{pk},</if>
TEXT=#{model.Text,jdbcType=VARCHAR},
REMARK=#{model.Remark,jdbcType=VARCHAR},

		</trim>
	where <include refid="pk"/>=#{model.Id,jdbcType=VARCHAR}
</update>

<delete id="deleteEqPk" flushCache="true">
	delete from <include refid="table"/>  where <include refid="pk"/> =#{pk}
</delete>

<delete id="deleteInPk" flushCache="true">
	delete from <include refid="table"/> where <include refid="pk"/> in (
		<foreach item="pk" collection="pks"  separator="," >#{pk}</foreach> 
	)
</delete>

<select id="selectView" resultType="ArrayList" resultMap="resultView">
	select <include refid="columns"/>  <include refid="joinCols"/> from <include refid="table" /> main <include refid="join"/> 
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectViewCondition"/>
		</trim>	<include refid="orderby"/>
</select>

<select id="selectViewUnion" resultType="ArrayList" resultMap="resultView">
  select main.* from (
		<foreach collection="conditions" item="condition" separator=" union ">
			<if test="condition neq null" >
				 select <include refid="queryCols"/> <include refid="joinCols"/> from <include refid="table"/> main  <include refid="join"/> 
					<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
						<include refid="selectViewCondition"/>
					</trim>
			</if>
		</foreach>
  ) main 

<include refid="orderby"/>
</select>

<select id="selectViewEqPk"  resultMap="resultView">
	select <include refid="queryCols"/> <include refid="joinCols"/>  from <include refid="table"/> main <include refid="join"/> where main.<include refid="pk"/> = #{pk}
<include refid="orderby"/>
</select>

<select id="selectViewInPk" resultType="ArrayList" resultMap="resultView" >
	select <include refid="queryCols"/> <include refid="joinCols"/> from <include refid="table"/> main <include refid="join"/> where main.<include refid="pk"/> in (
		<foreach item="pk" collection="pks"  separator="," > #{pk} </foreach>
	)
	<include refid="orderby"/>
</select>

<select  id="selectViewAll"  resultType="ArrayList"  resultMap="resultView">
	select  <include refid="queryCols"/> <include refid="joinCols"/> from  <include refid="table"/> main <include refid="join"/>
	<include refid="orderby"/>
</select>

</mapper>