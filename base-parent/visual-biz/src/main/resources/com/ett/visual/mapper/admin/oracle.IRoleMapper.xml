<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Create Date:2012-03-13 04:30:48
	MapperTemplate:com.smartken.toyz4j.mybatis.OracleMapperTemplate
	Model:com.ett.visual.model.admin.RoleModel 


 public static enum F { 
  Id,Name,Descp,TokenArray  
 } 

private String Id,Name,Descp,TokenArray;

 

 public  class SimpleQueryModel extends com.ett.visual.model.admin.RoleModel { 
 private String neqId,likeId,notlikeId,neqName,
				likeName,notlikeName,neqDescp,likeDescp,
				notlikeDescp,neqTokenArray,likeTokenArray,notlikeTokenArray;

private List<String> inId,notinId,inName,notinName,
				inDescp,notinDescp,inTokenArray,notinTokenArray;

private Boolean isnullId,isnotnullId,isnullName,isnotnullName,
				isnullDescp,isnotnullDescp,isnullTokenArray,isnotnullTokenArray;

 
 } 
--> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ett.visual.mapper.admin.IRoleMapper">

<cache flushInterval="30000" readOnly="true"></cache>


<sql id="table">VIS_ADMIN_ROLE</sql>

<sql id="pk">id</sql>

<sql id="colums"></sql>

<sql id="updateCols"></sql>

<sql id="insertCols"></sql>

<sql id="orderby"></sql>

<sql id="joinColums"></sql>

<sql id="join"></sql><!-- 别名m已被主表使用  -->

<resultMap type="com.ett.visual.model.admin.RoleModel" id="resultMap">
 <id column="ID"  property="Id" jdbcType="VARCHAR"  javaType="String"/>
<result column="NAME"  property="Name" jdbcType="VARCHAR"  javaType="String"/>
<result column="DESCP"  property="Descp" jdbcType="VARCHAR"  javaType="String"/>
<result column="TOKEN_ARRAY"  property="TokenArray" jdbcType="VARCHAR"  javaType="String"/>

 </resultMap>


<sql id="selectCondition">
<if test="model['isnullId'] and model['isnullId'] eq true">and m.ID is null  </if> 
<if test="model['isnotnullId'] and model['isnotnullId'] eq true">and m.ID is not null </if> 
<if test="model['inId'] and model['inId'] neq null">and m.ID in <foreach item="model.inId" collection="list" open="(" separator="," close=")"> #{model.inId} </foreach> </if> 
<if test="model['notinId'] and model['notinId'] neq null">and m.ID not in <foreach item="model.notinId" collection="list" open="(" separator="," close=")"> #{model.notinId} </foreach> </if> 
<if test="model.getClass().getField('Id') neq null and model['Id'] neq null">and m.ID = #{model.Id,jdbcType=VARCHAR, javaType=String } </if> 
<if test="model['neqId'] and model['neqId'] neq null">and m.ID != #{model.neqId,jdbcType=VARCHAR, javaType=String } </if> 
<if test="model['likeId'] and model['likeId'] neq null">and m.ID like #{model.likeId,jdbcType=VARCHAR ,javaType=String } </if> 
<if test="model['notlikeId'] and model['notlikeId'] neq null">and m.ID not like #{model.notlikeId,jdbcType=VARCHAR ,javaType=String } </if> 

<if test="model['isnullName'] and model['isnullName'] eq true">and m.NAME is null  </if> 
<if test="model['isnotnullName'] and model['isnotnullName'] eq true">and m.NAME is not null </if> 
<if test="model['inName'] and model['inName'] neq null">and m.NAME in <foreach item="model.inName" collection="list" open="(" separator="," close=")"> #{model.inName} </foreach> </if> 
<if test="model['notinName'] and model['notinName'] neq null">and m.NAME not in <foreach item="model.notinName" collection="list" open="(" separator="," close=")"> #{model.notinName} </foreach> </if> 
<if test="model.getClass().getField('Name') neq null and model['Name'] neq null">and m.NAME = #{model.Name,jdbcType=VARCHAR, javaType=String } </if> 
<if test="model['neqName'] and model['neqName'] neq null">and m.NAME != #{model.neqName,jdbcType=VARCHAR, javaType=String } </if> 
<if test="model['likeName'] and model['likeName'] neq null">and m.NAME like #{model.likeName,jdbcType=VARCHAR ,javaType=String } </if> 
<if test="model['notlikeName'] and model['notlikeName'] neq null">and m.NAME not like #{model.notlikeName,jdbcType=VARCHAR ,javaType=String } </if> 

<if test="model['isnullDescp'] and model['isnullDescp'] eq true">and m.DESCP is null  </if> 
<if test="model['isnotnullDescp'] and model['isnotnullDescp'] eq true">and m.DESCP is not null </if> 
<if test="model['inDescp'] and model['inDescp'] neq null">and m.DESCP in <foreach item="model.inDescp" collection="list" open="(" separator="," close=")"> #{model.inDescp} </foreach> </if> 
<if test="model['notinDescp'] and model['notinDescp'] neq null">and m.DESCP not in <foreach item="model.notinDescp" collection="list" open="(" separator="," close=")"> #{model.notinDescp} </foreach> </if> 
<if test="model.getClass().getField('Descp') neq null and model['Descp'] neq null">and m.DESCP = #{model.Descp,jdbcType=VARCHAR, javaType=String } </if> 
<if test="model['neqDescp'] and model['neqDescp'] neq null">and m.DESCP != #{model.neqDescp,jdbcType=VARCHAR, javaType=String } </if> 
<if test="model['likeDescp'] and model['likeDescp'] neq null">and m.DESCP like #{model.likeDescp,jdbcType=VARCHAR ,javaType=String } </if> 
<if test="model['notlikeDescp'] and model['notlikeDescp'] neq null">and m.DESCP not like #{model.notlikeDescp,jdbcType=VARCHAR ,javaType=String } </if> 

<if test="model['isnullTokenArray'] and model['isnullTokenArray'] eq true">and m.TOKEN_ARRAY is null  </if> 
<if test="model['isnotnullTokenArray'] and model['isnotnullTokenArray'] eq true">and m.TOKEN_ARRAY is not null </if> 
<if test="model['inTokenArray'] and model['inTokenArray'] neq null">and m.TOKEN_ARRAY in <foreach item="model.inTokenArray" collection="list" open="(" separator="," close=")"> #{model.inTokenArray} </foreach> </if> 
<if test="model['notinTokenArray'] and model['notinTokenArray'] neq null">and m.TOKEN_ARRAY not in <foreach item="model.notinTokenArray" collection="list" open="(" separator="," close=")"> #{model.notinTokenArray} </foreach> </if> 
<if test="model.getClass().getField('TokenArray') neq null and model['TokenArray'] neq null">and m.TOKEN_ARRAY = #{model.TokenArray,jdbcType=VARCHAR, javaType=String } </if> 
<if test="model['neqTokenArray'] and model['neqTokenArray'] neq null">and m.TOKEN_ARRAY != #{model.neqTokenArray,jdbcType=VARCHAR, javaType=String } </if> 
<if test="model['likeTokenArray'] and model['likeTokenArray'] neq null">and m.TOKEN_ARRAY like #{model.likeTokenArray,jdbcType=VARCHAR ,javaType=String } </if> 
<if test="model['notlikeTokenArray'] and model['notlikeTokenArray'] neq null">and m.TOKEN_ARRAY not like #{model.notlikeTokenArray,jdbcType=VARCHAR ,javaType=String } </if> 


</sql>


<select id="selectUnion" resultType="ArrayList" resultMap="resultMap">
  select m.* from (
	<trim  prefixOverrides="union" suffixOverrides="union">
		<foreach collection="querys" item="model">
			<if test="model neq null">
				union select m.* from <include refid="table" /> m 
					<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
						<include refid="selectCondition"/>
					</trim>
			</if>
		</foreach>
	</trim>
   ) m <include refid="orderby"/>
</select>

<select id="selectEqPk"  resultMap="resultMap">
	select m.* from <include refid="table" /> m  where m.<include refid="pk" /> = #{Id,jdbcType=VARCHAR,javaType=String}
</select>

<select  id="selectAll"  resultType="ArrayList"  resultMap="resultMap">
	select m.* from  <include refid="table" /> m
	<include refid="orderby"/>
</select>

<select id="countAll" resultType="int">
	select count(<include refid="pk"/>) from <include refid="table"/>
</select>

<select id="count" resultType="int">
	select count(<include refid="pk"/>) from <include refid="table"/>
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
	<include refid="orderby"/>
</select>

<insert id="insert" flushCache="true" >
	insert into <include refid="table"/> ( <include refid="colums"/> ) values  
	(
		<trim  prefixOverrides="," suffixOverrides=",">
			<include refid="insertCols"/>
		</trim>
	)
</insert>

<update id="update" flushCache="true" >
	update <include refid="table"/> set 
		<trim  prefixOverrides="," suffixOverrides=",">
			<include refid="updateCols"/>
		</trim>
	where <include refid="pk" />=#{model.Id,jdbcType=VARCHAR,javaType=String}</update>

<delete id="deleteEqPk" flushCache="true">
	delete from <include refid="table"/> where <include refid="pk" /> =#{Id,jdbcType=VARCHAR,javaType=String}
</delete>

<resultMap type="com.ett.visual.model.admin.RoleModel" id="viewMap" extends="resultMap" ></resultMap>


<sql id="selectViewCondition">
	 <include refid="selectCondition"/>  
</sql><select id="selectViewUnion" resultType="ArrayList" resultMap="viewMap">
  select m.* from (
	<trim  prefixOverrides="union" suffixOverrides="union">
		<foreach collection="list" item="model">
			<if test="model neq null">
				union select m.* <include refid="joinColums"/> from <include refid="table" /> m <include refid="join"/> 
					<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
						<include refid="selectViewCondition"/>
					</trim>
			</if>
		</foreach>
	</trim>
  ) m <include refid="orderby"/>
</select>

<select  id="selectViewAll"  resultType="ArrayList"  resultMap="viewMap">
	select m.* <include refid="joinColums"/> from  <include refid="table" /> m <include refid="join"/>
	<include refid="orderby"/>
</select>

</mapper>