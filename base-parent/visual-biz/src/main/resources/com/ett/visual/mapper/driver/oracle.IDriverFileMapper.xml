<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Create Date:2012-03-30 12:28:07
	MapperTemplate:com.smartken.toyz4j.mybatis.OracleMapperTemplate
	Model:com.ett.visual.model.driver.DriverFileModel 


 public static enum F { 
  Id,Title,Remark,DriverPk,CreateDate,LastModifyDate,OperPk,Rec,Type,Status,CompleteInd,
CleanInd,IndexInd,LastCheckDate,SecretLevel  
 } 

private byte[] Rec;

private String Id,Title,Remark,DriverPk,
				OperPk,Type,Status,CompleteInd,
				CleanInd,IndexInd;

private Date CreateDate,LastModifyDate,LastCheckDate;

private Integer SecretLevel;

 

 public  class SimpleQueryModel extends com.ett.visual.model.driver.DriverFileModel { 
 private List<Date> isinCreateDate,isnotinCreateDate,isinLastModifyDate,isnotinLastModifyDate,
				isinLastCheckDate,isnotinLastCheckDate;

private Date neqCreateDate,eqCreateDate,minCreateDate,maxCreateDate,
				neqLastModifyDate,eqLastModifyDate,minLastModifyDate,maxLastModifyDate,
				neqLastCheckDate,eqLastCheckDate,minLastCheckDate,maxLastCheckDate;

private String neqId,eqId,likeId,notlikeId,
				neqTitle,eqTitle,likeTitle,notlikeTitle,
				neqRemark,eqRemark,likeRemark,notlikeRemark,
				neqDriverPk,eqDriverPk,likeDriverPk,notlikeDriverPk,
				neqOperPk,eqOperPk,likeOperPk,notlikeOperPk,
				neqType,eqType,likeType,notlikeType,
				neqStatus,eqStatus,likeStatus,notlikeStatus,
				neqCompleteInd,eqCompleteInd,likeCompleteInd,notlikeCompleteInd,
				neqCleanInd,eqCleanInd,likeCleanInd,notlikeCleanInd,
				neqIndexInd,eqIndexInd,likeIndexInd,notlikeIndexInd;

private List<String> isinId,isnotinId,isinTitle,isnotinTitle,
				isinRemark,isnotinRemark,isinDriverPk,isnotinDriverPk,
				isinOperPk,isnotinOperPk,isinType,isnotinType,
				isinStatus,isnotinStatus,isinCompleteInd,isnotinCompleteInd,
				isinCleanInd,isnotinCleanInd,isinIndexInd,isnotinIndexInd;

private Integer neqSecretLevel,eqSecretLevel,minSecretLevel,maxSecretLevel;

private List<Integer> isinSecretLevel,isnotinSecretLevel;

private Boolean isnullId,isnotnullId,isnullTitle,isnotnullTitle,
				isnullRemark,isnotnullRemark,isnullDriverPk,isnotnullDriverPk,
				isnullCreateDate,isnotnullCreateDate,isnullLastModifyDate,isnotnullLastModifyDate,
				isnullOperPk,isnotnullOperPk,isnullType,isnotnullType,
				isnullStatus,isnotnullStatus,isnullCompleteInd,isnotnullCompleteInd,
				isnullCleanInd,isnotnullCleanInd,isnullIndexInd,isnotnullIndexInd,
				isnullLastCheckDate,isnotnullLastCheckDate,isnullSecretLevel,isnotnullSecretLevel;

 
 } 
--> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ett.visual.mapper.driver.IDriverFileMapper">

<sql id="table">VIS_DRIVER_FILE</sql>

<sql id="pk">id</sql>

<sql id="columns">
main.ID,main.TITLE,main.REMARK,main.DRIVER_PK,main.CREATE_DATE,main.LAST_MODIFY_DATE,main.OPER_PK,main.REC,main.TYPE,main.STATUS,main.COMPLETE_IND,
main.CLEAN_IND,main.INDEX_IND,main.LAST_CHECK_DATE,main.SECRET_LEVEL
</sql>
<sql id="queryCols">
	<trim prefixOverrides=","  suffixOverrides=",">
		<choose>
			<when test="dynamic eq null" >
				<include refid="columns"/>
			</when>
			<when test=" dynamic['colums'] neq null and dynamic['colums'].size() gt 0 ">
				<foreach collection="dynamic.colums" item="col"  >
					 main.${col.column} , 
				</foreach>
			</when>
		</choose>
	</trim>
</sql>


<sql id="insertCols">
#{Id,jdbcType=VARCHAR},
#{Title,jdbcType=VARCHAR},
#{Remark,jdbcType=VARCHAR},
#{DriverPk,jdbcType=VARCHAR},
#{CreateDate,jdbcType=DATE},
#{LastModifyDate,jdbcType=DATE},
#{OperPk,jdbcType=VARCHAR},
#{Rec,jdbcType=BLOB},
#{Type,jdbcType=VARCHAR},
#{Status,jdbcType=VARCHAR},
#{CompleteInd,jdbcType=CHAR},
#{CleanInd,jdbcType=CHAR},
#{IndexInd,jdbcType=CHAR},
#{LastCheckDate,jdbcType=DATE},
#{SecretLevel,jdbcType=INTEGER},

</sql>

<sql id="updateCols">
<if test="pk neq null">id=#{pk},</if>
main.TITLE=#{model.Title,jdbcType=VARCHAR},
main.REMARK=#{model.Remark,jdbcType=VARCHAR},
main.DRIVER_PK=#{model.DriverPk,jdbcType=VARCHAR},
main.CREATE_DATE=#{model.CreateDate,jdbcType=DATE},
main.LAST_MODIFY_DATE=#{model.LastModifyDate,jdbcType=DATE},
main.OPER_PK=#{model.OperPk,jdbcType=VARCHAR},
main.REC=#{model.Rec,jdbcType=BLOB},
main.TYPE=#{model.Type,jdbcType=VARCHAR},
main.STATUS=#{model.Status,jdbcType=VARCHAR},
main.COMPLETE_IND=#{model.CompleteInd,jdbcType=CHAR},
main.CLEAN_IND=#{model.CleanInd,jdbcType=CHAR},
main.INDEX_IND=#{model.IndexInd,jdbcType=CHAR},
main.LAST_CHECK_DATE=#{model.LastCheckDate,jdbcType=DATE},
main.SECRET_LEVEL=#{model.SecretLevel,jdbcType=INTEGER},

</sql>

<sql id="orderby">
	<trim  suffixOverrides=",">
		<choose>
			<when test="dynamic eq null">
				order by  <include refid="pk" /> DESC
			</when>
			<when test="dynamic['orderbyBounds'] neq null and dynamic['orderbyBounds'].size() gt 0 ">
				<foreach collection="dynamic.orderbyBounds" item="ob" open=" order by " >
					 main.${ob.colum} ${ob.type}, 
				</foreach>
			</when>
		</choose>
	</trim>
</sql>


<resultMap type="com.ett.visual.model.driver.DriverFileModel" id="resultMap">
 <id column="ID"  property="Id" jdbcType="VARCHAR"  />
<result column="TITLE"  property="Title" jdbcType="VARCHAR"  />
<result column="REMARK"  property="Remark" jdbcType="VARCHAR"  />
<result column="DRIVER_PK"  property="DriverPk" jdbcType="VARCHAR"  />
<result column="CREATE_DATE"  property="CreateDate" jdbcType="DATE"  />
<result column="LAST_MODIFY_DATE"  property="LastModifyDate" jdbcType="DATE"  />
<result column="OPER_PK"  property="OperPk" jdbcType="VARCHAR"  />
<result column="REC"  property="Rec" jdbcType="BLOB" />
<result column="TYPE"  property="Type" jdbcType="VARCHAR"  />
<result column="STATUS"  property="Status" jdbcType="VARCHAR"  />
<result column="COMPLETE_IND"  property="CompleteInd" jdbcType="CHAR"  />
<result column="CLEAN_IND"  property="CleanInd" jdbcType="CHAR"  />
<result column="INDEX_IND"  property="IndexInd" jdbcType="CHAR"  />
<result column="LAST_CHECK_DATE"  property="LastCheckDate" jdbcType="DATE"  />
<result column="SECRET_LEVEL"  property="SecretLevel" jdbcType="INTEGER"  />

 </resultMap>


<sql id="selectCondition">
<if test=" 1 eq 1 and model['Id'] neq null">and main.ID = #{model.Id } </if> 
<if test=" 1 eq 1 and model['eqId'] neq null">and main.ID = #{model.eqId } </if> 
<if test=" 1 eq 1 and model['neqId'] neq null">and main.ID != #{model.neqId } </if> 
<if test=" 1 eq 1 and model['isnullId'] neq null and model['isnullId'] eq true">and main.ID is null  </if> 
<if test=" 1 eq 1 and model['isnotnullId'] neq null and model['isnotnullId'] eq true">and main.ID is not null </if> 
<if test=" 1 eq 1 and model['isinId'] neq null">and main.ID in <foreach collection="model.isinId" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinId'] neq null">and main.ID not in <foreach collection="model.isnotinId" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeId'] neq null">and main.ID like #{model.likeId} </if> 
<if test=" 1 eq 1 and model['notlikeId'] neq null">and main.ID not like #{model.notlikeId  } </if> 

<if test=" 1 eq 1 and model['Title'] neq null">and main.TITLE = #{model.Title } </if> 
<if test=" 1 eq 1 and model['eqTitle'] neq null">and main.TITLE = #{model.eqTitle } </if> 
<if test=" 1 eq 1 and model['neqTitle'] neq null">and main.TITLE != #{model.neqTitle } </if> 
<if test=" 1 eq 1 and model['isnullTitle'] neq null and model['isnullTitle'] eq true">and main.TITLE is null  </if> 
<if test=" 1 eq 1 and model['isnotnullTitle'] neq null and model['isnotnullTitle'] eq true">and main.TITLE is not null </if> 
<if test=" 1 eq 1 and model['isinTitle'] neq null">and main.TITLE in <foreach collection="model.isinTitle" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinTitle'] neq null">and main.TITLE not in <foreach collection="model.isnotinTitle" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeTitle'] neq null">and main.TITLE like #{model.likeTitle} </if> 
<if test=" 1 eq 1 and model['notlikeTitle'] neq null">and main.TITLE not like #{model.notlikeTitle  } </if> 

<if test=" 1 eq 1 and model['Remark'] neq null">and main.REMARK = #{model.Remark } </if> 
<if test=" 1 eq 1 and model['eqRemark'] neq null">and main.REMARK = #{model.eqRemark } </if> 
<if test=" 1 eq 1 and model['neqRemark'] neq null">and main.REMARK != #{model.neqRemark } </if> 
<if test=" 1 eq 1 and model['isnullRemark'] neq null and model['isnullRemark'] eq true">and main.REMARK is null  </if> 
<if test=" 1 eq 1 and model['isnotnullRemark'] neq null and model['isnotnullRemark'] eq true">and main.REMARK is not null </if> 
<if test=" 1 eq 1 and model['isinRemark'] neq null">and main.REMARK in <foreach collection="model.isinRemark" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinRemark'] neq null">and main.REMARK not in <foreach collection="model.isnotinRemark" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeRemark'] neq null">and main.REMARK like #{model.likeRemark} </if> 
<if test=" 1 eq 1 and model['notlikeRemark'] neq null">and main.REMARK not like #{model.notlikeRemark  } </if> 

<if test=" 1 eq 1 and model['DriverPk'] neq null">and main.DRIVER_PK = #{model.DriverPk } </if> 
<if test=" 1 eq 1 and model['eqDriverPk'] neq null">and main.DRIVER_PK = #{model.eqDriverPk } </if> 
<if test=" 1 eq 1 and model['neqDriverPk'] neq null">and main.DRIVER_PK != #{model.neqDriverPk } </if> 
<if test=" 1 eq 1 and model['isnullDriverPk'] neq null and model['isnullDriverPk'] eq true">and main.DRIVER_PK is null  </if> 
<if test=" 1 eq 1 and model['isnotnullDriverPk'] neq null and model['isnotnullDriverPk'] eq true">and main.DRIVER_PK is not null </if> 
<if test=" 1 eq 1 and model['isinDriverPk'] neq null">and main.DRIVER_PK in <foreach collection="model.isinDriverPk" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinDriverPk'] neq null">and main.DRIVER_PK not in <foreach collection="model.isnotinDriverPk" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeDriverPk'] neq null">and main.DRIVER_PK like #{model.likeDriverPk} </if> 
<if test=" 1 eq 1 and model['notlikeDriverPk'] neq null">and main.DRIVER_PK not like #{model.notlikeDriverPk  } </if> 

<if test=" 1 eq 1 and model['CreateDate'] neq null">and main.CREATE_DATE = #{model.CreateDate } </if> 
<if test=" 1 eq 1 and model['eqCreateDate'] neq null">and main.CREATE_DATE = #{model.eqCreateDate } </if> 
<if test=" 1 eq 1 and model['neqCreateDate'] neq null">and main.CREATE_DATE != #{model.neqCreateDate } </if> 
<if test=" 1 eq 1 and model['isnullCreateDate'] neq null and model['isnullCreateDate'] eq true">and main.CREATE_DATE is null  </if> 
<if test=" 1 eq 1 and model['isnotnullCreateDate'] neq null and model['isnotnullCreateDate'] eq true">and main.CREATE_DATE is not null </if> 
<if test=" 1 eq 1 and model['isinCreateDate'] neq null">and main.CREATE_DATE in <foreach collection="model.isinCreateDate" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinCreateDate'] neq null">and main.CREATE_DATE not in <foreach collection="model.isnotinCreateDate" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['minCreateDate'] neq null">and to_char(main.CREATE_DATE,'YYYY-MM-DD') &gt;= to_char(#{model.minCreateDate },'YYYY-MM-DD') </if> 
<if test=" 1 eq 1 and model['maxCreateDate'] neq null">and to_char(main.CREATE_DATE,'YYYY-MM-DD') &lt;= to_char(#{model.maxCreateDate },'YYYY-MM-DD') </if> 

<if test=" 1 eq 1 and model['LastModifyDate'] neq null">and main.LAST_MODIFY_DATE = #{model.LastModifyDate } </if> 
<if test=" 1 eq 1 and model['eqLastModifyDate'] neq null">and main.LAST_MODIFY_DATE = #{model.eqLastModifyDate } </if> 
<if test=" 1 eq 1 and model['neqLastModifyDate'] neq null">and main.LAST_MODIFY_DATE != #{model.neqLastModifyDate } </if> 
<if test=" 1 eq 1 and model['isnullLastModifyDate'] neq null and model['isnullLastModifyDate'] eq true">and main.LAST_MODIFY_DATE is null  </if> 
<if test=" 1 eq 1 and model['isnotnullLastModifyDate'] neq null and model['isnotnullLastModifyDate'] eq true">and main.LAST_MODIFY_DATE is not null </if> 
<if test=" 1 eq 1 and model['isinLastModifyDate'] neq null">and main.LAST_MODIFY_DATE in <foreach collection="model.isinLastModifyDate" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinLastModifyDate'] neq null">and main.LAST_MODIFY_DATE not in <foreach collection="model.isnotinLastModifyDate" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['minLastModifyDate'] neq null">and to_char(main.LAST_MODIFY_DATE,'YYYY-MM-DD') &gt;= to_char(#{model.minLastModifyDate },'YYYY-MM-DD') </if> 
<if test=" 1 eq 1 and model['maxLastModifyDate'] neq null">and to_char(main.LAST_MODIFY_DATE,'YYYY-MM-DD') &lt;= to_char(#{model.maxLastModifyDate },'YYYY-MM-DD') </if> 

<if test=" 1 eq 1 and model['OperPk'] neq null">and main.OPER_PK = #{model.OperPk } </if> 
<if test=" 1 eq 1 and model['eqOperPk'] neq null">and main.OPER_PK = #{model.eqOperPk } </if> 
<if test=" 1 eq 1 and model['neqOperPk'] neq null">and main.OPER_PK != #{model.neqOperPk } </if> 
<if test=" 1 eq 1 and model['isnullOperPk'] neq null and model['isnullOperPk'] eq true">and main.OPER_PK is null  </if> 
<if test=" 1 eq 1 and model['isnotnullOperPk'] neq null and model['isnotnullOperPk'] eq true">and main.OPER_PK is not null </if> 
<if test=" 1 eq 1 and model['isinOperPk'] neq null">and main.OPER_PK in <foreach collection="model.isinOperPk" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinOperPk'] neq null">and main.OPER_PK not in <foreach collection="model.isnotinOperPk" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeOperPk'] neq null">and main.OPER_PK like #{model.likeOperPk} </if> 
<if test=" 1 eq 1 and model['notlikeOperPk'] neq null">and main.OPER_PK not like #{model.notlikeOperPk  } </if> 

<if test=" 1 eq 1 and model['Type'] neq null">and main.TYPE = #{model.Type } </if> 
<if test=" 1 eq 1 and model['eqType'] neq null">and main.TYPE = #{model.eqType } </if> 
<if test=" 1 eq 1 and model['neqType'] neq null">and main.TYPE != #{model.neqType } </if> 
<if test=" 1 eq 1 and model['isnullType'] neq null and model['isnullType'] eq true">and main.TYPE is null  </if> 
<if test=" 1 eq 1 and model['isnotnullType'] neq null and model['isnotnullType'] eq true">and main.TYPE is not null </if> 
<if test=" 1 eq 1 and model['isinType'] neq null">and main.TYPE in <foreach collection="model.isinType" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinType'] neq null">and main.TYPE not in <foreach collection="model.isnotinType" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeType'] neq null">and main.TYPE like #{model.likeType} </if> 
<if test=" 1 eq 1 and model['notlikeType'] neq null">and main.TYPE not like #{model.notlikeType  } </if> 

<if test=" 1 eq 1 and model['Status'] neq null">and main.STATUS = #{model.Status } </if> 
<if test=" 1 eq 1 and model['eqStatus'] neq null">and main.STATUS = #{model.eqStatus } </if> 
<if test=" 1 eq 1 and model['neqStatus'] neq null">and main.STATUS != #{model.neqStatus } </if> 
<if test=" 1 eq 1 and model['isnullStatus'] neq null and model['isnullStatus'] eq true">and main.STATUS is null  </if> 
<if test=" 1 eq 1 and model['isnotnullStatus'] neq null and model['isnotnullStatus'] eq true">and main.STATUS is not null </if> 
<if test=" 1 eq 1 and model['isinStatus'] neq null">and main.STATUS in <foreach collection="model.isinStatus" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinStatus'] neq null">and main.STATUS not in <foreach collection="model.isnotinStatus" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeStatus'] neq null">and main.STATUS like #{model.likeStatus} </if> 
<if test=" 1 eq 1 and model['notlikeStatus'] neq null">and main.STATUS not like #{model.notlikeStatus  } </if> 

<if test=" 1 eq 1 and model['CompleteInd'] neq null">and main.COMPLETE_IND = #{model.CompleteInd } </if> 
<if test=" 1 eq 1 and model['eqCompleteInd'] neq null">and main.COMPLETE_IND = #{model.eqCompleteInd } </if> 
<if test=" 1 eq 1 and model['neqCompleteInd'] neq null">and main.COMPLETE_IND != #{model.neqCompleteInd } </if> 
<if test=" 1 eq 1 and model['isnullCompleteInd'] neq null and model['isnullCompleteInd'] eq true">and main.COMPLETE_IND is null  </if> 
<if test=" 1 eq 1 and model['isnotnullCompleteInd'] neq null and model['isnotnullCompleteInd'] eq true">and main.COMPLETE_IND is not null </if> 
<if test=" 1 eq 1 and model['isinCompleteInd'] neq null">and main.COMPLETE_IND in <foreach collection="model.isinCompleteInd" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinCompleteInd'] neq null">and main.COMPLETE_IND not in <foreach collection="model.isnotinCompleteInd" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeCompleteInd'] neq null">and main.COMPLETE_IND like #{model.likeCompleteInd} </if> 
<if test=" 1 eq 1 and model['notlikeCompleteInd'] neq null">and main.COMPLETE_IND not like #{model.notlikeCompleteInd  } </if> 

<if test=" 1 eq 1 and model['CleanInd'] neq null">and main.CLEAN_IND = #{model.CleanInd } </if> 
<if test=" 1 eq 1 and model['eqCleanInd'] neq null">and main.CLEAN_IND = #{model.eqCleanInd } </if> 
<if test=" 1 eq 1 and model['neqCleanInd'] neq null">and main.CLEAN_IND != #{model.neqCleanInd } </if> 
<if test=" 1 eq 1 and model['isnullCleanInd'] neq null and model['isnullCleanInd'] eq true">and main.CLEAN_IND is null  </if> 
<if test=" 1 eq 1 and model['isnotnullCleanInd'] neq null and model['isnotnullCleanInd'] eq true">and main.CLEAN_IND is not null </if> 
<if test=" 1 eq 1 and model['isinCleanInd'] neq null">and main.CLEAN_IND in <foreach collection="model.isinCleanInd" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinCleanInd'] neq null">and main.CLEAN_IND not in <foreach collection="model.isnotinCleanInd" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeCleanInd'] neq null">and main.CLEAN_IND like #{model.likeCleanInd} </if> 
<if test=" 1 eq 1 and model['notlikeCleanInd'] neq null">and main.CLEAN_IND not like #{model.notlikeCleanInd  } </if> 

<if test=" 1 eq 1 and model['IndexInd'] neq null">and main.INDEX_IND = #{model.IndexInd } </if> 
<if test=" 1 eq 1 and model['eqIndexInd'] neq null">and main.INDEX_IND = #{model.eqIndexInd } </if> 
<if test=" 1 eq 1 and model['neqIndexInd'] neq null">and main.INDEX_IND != #{model.neqIndexInd } </if> 
<if test=" 1 eq 1 and model['isnullIndexInd'] neq null and model['isnullIndexInd'] eq true">and main.INDEX_IND is null  </if> 
<if test=" 1 eq 1 and model['isnotnullIndexInd'] neq null and model['isnotnullIndexInd'] eq true">and main.INDEX_IND is not null </if> 
<if test=" 1 eq 1 and model['isinIndexInd'] neq null">and main.INDEX_IND in <foreach collection="model.isinIndexInd" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinIndexInd'] neq null">and main.INDEX_IND not in <foreach collection="model.isnotinIndexInd" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeIndexInd'] neq null">and main.INDEX_IND like #{model.likeIndexInd} </if> 
<if test=" 1 eq 1 and model['notlikeIndexInd'] neq null">and main.INDEX_IND not like #{model.notlikeIndexInd  } </if> 

<if test=" 1 eq 1 and model['LastCheckDate'] neq null">and main.LAST_CHECK_DATE = #{model.LastCheckDate } </if> 
<if test=" 1 eq 1 and model['eqLastCheckDate'] neq null">and main.LAST_CHECK_DATE = #{model.eqLastCheckDate } </if> 
<if test=" 1 eq 1 and model['neqLastCheckDate'] neq null">and main.LAST_CHECK_DATE != #{model.neqLastCheckDate } </if> 
<if test=" 1 eq 1 and model['isnullLastCheckDate'] neq null and model['isnullLastCheckDate'] eq true">and main.LAST_CHECK_DATE is null  </if> 
<if test=" 1 eq 1 and model['isnotnullLastCheckDate'] neq null and model['isnotnullLastCheckDate'] eq true">and main.LAST_CHECK_DATE is not null </if> 
<if test=" 1 eq 1 and model['isinLastCheckDate'] neq null">and main.LAST_CHECK_DATE in <foreach collection="model.isinLastCheckDate" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinLastCheckDate'] neq null">and main.LAST_CHECK_DATE not in <foreach collection="model.isnotinLastCheckDate" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['minLastCheckDate'] neq null">and to_char(main.LAST_CHECK_DATE,'YYYY-MM-DD') &gt;= to_char(#{model.minLastCheckDate },'YYYY-MM-DD') </if> 
<if test=" 1 eq 1 and model['maxLastCheckDate'] neq null">and to_char(main.LAST_CHECK_DATE,'YYYY-MM-DD') &lt;= to_char(#{model.maxLastCheckDate },'YYYY-MM-DD') </if> 

<if test=" 1 eq 1 and model['SecretLevel'] neq null">and main.SECRET_LEVEL = #{model.SecretLevel } </if> 
<if test=" 1 eq 1 and model['eqSecretLevel'] neq null">and main.SECRET_LEVEL = #{model.eqSecretLevel } </if> 
<if test=" 1 eq 1 and model['neqSecretLevel'] neq null">and main.SECRET_LEVEL != #{model.neqSecretLevel } </if> 
<if test=" 1 eq 1 and model['isnullSecretLevel'] neq null and model['isnullSecretLevel'] eq true">and main.SECRET_LEVEL is null  </if> 
<if test=" 1 eq 1 and model['isnotnullSecretLevel'] neq null and model['isnotnullSecretLevel'] eq true">and main.SECRET_LEVEL is not null </if> 
<if test=" 1 eq 1 and model['isinSecretLevel'] neq null">and main.SECRET_LEVEL in <foreach collection="model.isinSecretLevel" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinSecretLevel'] neq null">and main.SECRET_LEVEL not in <foreach collection="model.isnotinSecretLevel" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['minSecretLevel'] neq null">and main.SECRET_LEVEL &gt;= #{model.minSecretLevel } </if> 
<if test=" 1 eq 1 and model['maxSecretLevel'] neq null">and main.SECRET_LEVEL &lt;= #{model.maxSecretLevel} </if> 


</sql>


<select id="select" resultType="ArrayList" resultMap="resultMap">
	select <include refid="queryCols"/>  from <include refid="table"/>  main   
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
	<include refid="orderby"/>
</select>

<select id="selectUnion" resultType="ArrayList" resultMap="resultMap">
  select  main.* from (
	<trim  prefixOverrides="union" suffixOverrides="union">
		<foreach collection="querys" item="model">
			<if test="model neq null">
				union select <include refid="queryCols" /> from <include refid="table"  /> main 
					<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
						<include refid="selectCondition"/>
					</trim>
			</if>
		</foreach>
	</trim>
   ) main 
<include refid="orderby"/>
</select>

<select id="selectEqPk"  resultMap="resultMap">
	select <include refid="queryCols"/> from <include refid="table"/> main  where <include refid="pk"/> = #{pk}
</select>

<select  id="selectAll"  resultType="ArrayList"  resultMap="resultMap">
	select <include refid="queryCols"/> from  <include refid="table"/> main  
	<include refid="orderby"/>
</select>

<select id="countAll" resultType="int">
	select count(<include refid="pk"/>) from <include refid="table"/> 
</select>

<select id="count" resultType="int">
	select count(<include refid="pk"/>) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="avg" resultType="int">
	select avg(${column}) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="sum" resultType="int">
	select sum(${column}) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="min" resultType="int">
	select min(${column}) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="max" resultType="int">
	select max(${column}) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<insert id="insert" flushCache="true" >
	insert into <include refid="table"/> main  ( <include refid="columns"/> ) values  
	(
		<trim  prefixOverrides="," suffixOverrides=",">
			<include refid="insertCols"/>
		</trim>
	)
</insert>

<update id="update" flushCache="true" >
	update <include refid="table"/> main  set 
		<trim  prefixOverrides="," suffixOverrides=",">
			<include refid="updateCols"/>
		</trim>
	where main.<include refid="pk"/>=#{model.Id,jdbcType=VARCHAR}
</update>

<delete id="deleteEqPk" flushCache="true">
	delete from <include refid="table"/>  where <include refid="pk"/> =#{pk}
</delete>

<delete id="deleteInPk" flushCache="true">
	delete from <include refid="table"/> where <include refid="pk"/> in
		<foreach item="pk" collection="pks" open="(" separator="," close=")">#{pk}</foreach>
</delete>

<select id="selectView" resultType="ArrayList" resultMap="resultView">
	select <include refid="columns"/>  <include refid="joinCols"/> from <include refid="table" /> main <include refid="join"/> 
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectViewCondition"/>
		</trim>	<include refid="orderby"/>
</select>

<select id="selectViewUnion" resultType="ArrayList" resultMap="resultView">
  select main.* from (
	<trim  prefixOverrides="union" suffixOverrides="union">
		<foreach collection="querys" item="model">
			<if test="model neq null">
				union select <include refid="queryCols"/> <include refid="joinCols"/> from <include refid="table"/> main  <include refid="join"/> 
					<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
						<include refid="selectViewCondition"/>
					</trim>
			</if>
		</foreach>
	</trim>
  ) main 

<include refid="orderby"/>
</select>

<select id="selectViewEqPk"  resultMap="resultView">
	select <include refid="queryCols"/> <include refid="joinCols"/>  from <include refid="table"/> main <include refid="join"/> where main.<include refid="pk"/> = #{pk}
<include refid="orderby"/>
</select>

<select  id="selectViewAll"  resultType="ArrayList"  resultMap="resultView">
	select  <include refid="queryCols"/> <include refid="joinCols"/> from  <include refid="table"/> main <include refid="join"/>
	<include refid="orderby"/>
</select>

</mapper>