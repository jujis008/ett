<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Create Date:2012-03-30 12:28:06
	MapperTemplate:com.smartken.toyz4j.mybatis.OracleMapperTemplate
	Model:com.ett.visual.model.driver.DriverInfoModel 


 public static enum F { 
  Id,Name,IdcardNo,FileNo,Phone,SchoolCode  
 } 

private String Id,Name,IdcardNo,FileNo,
				Phone,SchoolCode;

 

 public  class SimpleQueryModel extends com.ett.visual.model.driver.DriverInfoModel { 
 private String neqId,eqId,likeId,notlikeId,
				neqName,eqName,likeName,notlikeName,
				neqIdcardNo,eqIdcardNo,likeIdcardNo,notlikeIdcardNo,
				neqFileNo,eqFileNo,likeFileNo,notlikeFileNo,
				neqPhone,eqPhone,likePhone,notlikePhone,
				neqSchoolCode,eqSchoolCode,likeSchoolCode,notlikeSchoolCode;

private List<String> isinId,isnotinId,isinName,isnotinName,
				isinIdcardNo,isnotinIdcardNo,isinFileNo,isnotinFileNo,
				isinPhone,isnotinPhone,isinSchoolCode,isnotinSchoolCode;

private Boolean isnullId,isnotnullId,isnullName,isnotnullName,
				isnullIdcardNo,isnotnullIdcardNo,isnullFileNo,isnotnullFileNo,
				isnullPhone,isnotnullPhone,isnullSchoolCode,isnotnullSchoolCode;

 
 } 
--> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ett.visual.mapper.driver.IDriverInfoMapper">

<sql id="table">VIS_DRIVER_INFO</sql>

<sql id="pk">id</sql>

<sql id="columns">
main.ID,main.NAME,main.IDCARD_NO,main.FILE_NO,main.PHONE,main.SCHOOL_CODE
</sql>
<sql id="queryCols">
	<trim prefixOverrides=","  suffixOverrides=",">
		<choose>
			<when test="dynamic eq null" >
				<include refid="columns"/>
			</when>
			<when test=" dynamic['colums'] neq null and dynamic['colums'].size() gt 0 ">
				<foreach collection="dynamic.colums" item="col"  >
					 main.${col.column} , 
				</foreach>
			</when>
		</choose>
	</trim>
</sql>


<sql id="insertCols">
#{Id,jdbcType=VARCHAR},
#{Name,jdbcType=VARCHAR},
#{IdcardNo,jdbcType=VARCHAR},
#{FileNo,jdbcType=VARCHAR},
#{Phone,jdbcType=VARCHAR},
#{SchoolCode,jdbcType=VARCHAR},

</sql>

<sql id="updateCols">
<if test="pk neq null">id=#{pk},</if>
main.NAME=#{model.Name,jdbcType=VARCHAR},
main.IDCARD_NO=#{model.IdcardNo,jdbcType=VARCHAR},
main.FILE_NO=#{model.FileNo,jdbcType=VARCHAR},
main.PHONE=#{model.Phone,jdbcType=VARCHAR},
main.SCHOOL_CODE=#{model.SchoolCode,jdbcType=VARCHAR},

</sql>

<sql id="orderby">
	<trim  suffixOverrides=",">
		<choose>
			<when test="dynamic eq null">
				order by  <include refid="pk" /> DESC
			</when>
			<when test="dynamic['orderbyBounds'] neq null and dynamic['orderbyBounds'].size() gt 0 ">
				<foreach collection="dynamic.orderbyBounds" item="ob" open=" order by " >
					 main.${ob.colum} ${ob.type}, 
				</foreach>
			</when>
		</choose>
	</trim>
</sql>


<resultMap type="com.ett.visual.model.driver.DriverInfoModel" id="resultMap">
 <id column="ID"  property="Id" jdbcType="VARCHAR"  />
<result column="NAME"  property="Name" jdbcType="VARCHAR"  />
<result column="IDCARD_NO"  property="IdcardNo" jdbcType="VARCHAR"  />
<result column="FILE_NO"  property="FileNo" jdbcType="VARCHAR"  />
<result column="PHONE"  property="Phone" jdbcType="VARCHAR"  />
<result column="SCHOOL_CODE"  property="SchoolCode" jdbcType="VARCHAR"  />

 </resultMap>


<sql id="selectCondition">
<if test=" 1 eq 1 and model['Id'] neq null">and main.ID = #{model.Id } </if> 
<if test=" 1 eq 1 and model['eqId'] neq null">and main.ID = #{model.eqId } </if> 
<if test=" 1 eq 1 and model['neqId'] neq null">and main.ID != #{model.neqId } </if> 
<if test=" 1 eq 1 and model['isnullId'] neq null and model['isnullId'] eq true">and main.ID is null  </if> 
<if test=" 1 eq 1 and model['isnotnullId'] neq null and model['isnotnullId'] eq true">and main.ID is not null </if> 
<if test=" 1 eq 1 and model['isinId'] neq null">and main.ID in <foreach collection="model.isinId" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinId'] neq null">and main.ID not in <foreach collection="model.isnotinId" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeId'] neq null">and main.ID like #{model.likeId} </if> 
<if test=" 1 eq 1 and model['notlikeId'] neq null">and main.ID not like #{model.notlikeId  } </if> 

<if test=" 1 eq 1 and model['Name'] neq null">and main.NAME = #{model.Name } </if> 
<if test=" 1 eq 1 and model['eqName'] neq null">and main.NAME = #{model.eqName } </if> 
<if test=" 1 eq 1 and model['neqName'] neq null">and main.NAME != #{model.neqName } </if> 
<if test=" 1 eq 1 and model['isnullName'] neq null and model['isnullName'] eq true">and main.NAME is null  </if> 
<if test=" 1 eq 1 and model['isnotnullName'] neq null and model['isnotnullName'] eq true">and main.NAME is not null </if> 
<if test=" 1 eq 1 and model['isinName'] neq null">and main.NAME in <foreach collection="model.isinName" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinName'] neq null">and main.NAME not in <foreach collection="model.isnotinName" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeName'] neq null">and main.NAME like #{model.likeName} </if> 
<if test=" 1 eq 1 and model['notlikeName'] neq null">and main.NAME not like #{model.notlikeName  } </if> 

<if test=" 1 eq 1 and model['IdcardNo'] neq null">and main.IDCARD_NO = #{model.IdcardNo } </if> 
<if test=" 1 eq 1 and model['eqIdcardNo'] neq null">and main.IDCARD_NO = #{model.eqIdcardNo } </if> 
<if test=" 1 eq 1 and model['neqIdcardNo'] neq null">and main.IDCARD_NO != #{model.neqIdcardNo } </if> 
<if test=" 1 eq 1 and model['isnullIdcardNo'] neq null and model['isnullIdcardNo'] eq true">and main.IDCARD_NO is null  </if> 
<if test=" 1 eq 1 and model['isnotnullIdcardNo'] neq null and model['isnotnullIdcardNo'] eq true">and main.IDCARD_NO is not null </if> 
<if test=" 1 eq 1 and model['isinIdcardNo'] neq null">and main.IDCARD_NO in <foreach collection="model.isinIdcardNo" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinIdcardNo'] neq null">and main.IDCARD_NO not in <foreach collection="model.isnotinIdcardNo" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeIdcardNo'] neq null">and main.IDCARD_NO like #{model.likeIdcardNo} </if> 
<if test=" 1 eq 1 and model['notlikeIdcardNo'] neq null">and main.IDCARD_NO not like #{model.notlikeIdcardNo  } </if> 

<if test=" 1 eq 1 and model['FileNo'] neq null">and main.FILE_NO = #{model.FileNo } </if> 
<if test=" 1 eq 1 and model['eqFileNo'] neq null">and main.FILE_NO = #{model.eqFileNo } </if> 
<if test=" 1 eq 1 and model['neqFileNo'] neq null">and main.FILE_NO != #{model.neqFileNo } </if> 
<if test=" 1 eq 1 and model['isnullFileNo'] neq null and model['isnullFileNo'] eq true">and main.FILE_NO is null  </if> 
<if test=" 1 eq 1 and model['isnotnullFileNo'] neq null and model['isnotnullFileNo'] eq true">and main.FILE_NO is not null </if> 
<if test=" 1 eq 1 and model['isinFileNo'] neq null">and main.FILE_NO in <foreach collection="model.isinFileNo" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinFileNo'] neq null">and main.FILE_NO not in <foreach collection="model.isnotinFileNo" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeFileNo'] neq null">and main.FILE_NO like #{model.likeFileNo} </if> 
<if test=" 1 eq 1 and model['notlikeFileNo'] neq null">and main.FILE_NO not like #{model.notlikeFileNo  } </if> 

<if test=" 1 eq 1 and model['Phone'] neq null">and main.PHONE = #{model.Phone } </if> 
<if test=" 1 eq 1 and model['eqPhone'] neq null">and main.PHONE = #{model.eqPhone } </if> 
<if test=" 1 eq 1 and model['neqPhone'] neq null">and main.PHONE != #{model.neqPhone } </if> 
<if test=" 1 eq 1 and model['isnullPhone'] neq null and model['isnullPhone'] eq true">and main.PHONE is null  </if> 
<if test=" 1 eq 1 and model['isnotnullPhone'] neq null and model['isnotnullPhone'] eq true">and main.PHONE is not null </if> 
<if test=" 1 eq 1 and model['isinPhone'] neq null">and main.PHONE in <foreach collection="model.isinPhone" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinPhone'] neq null">and main.PHONE not in <foreach collection="model.isnotinPhone" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likePhone'] neq null">and main.PHONE like #{model.likePhone} </if> 
<if test=" 1 eq 1 and model['notlikePhone'] neq null">and main.PHONE not like #{model.notlikePhone  } </if> 

<if test=" 1 eq 1 and model['SchoolCode'] neq null">and main.SCHOOL_CODE = #{model.SchoolCode } </if> 
<if test=" 1 eq 1 and model['eqSchoolCode'] neq null">and main.SCHOOL_CODE = #{model.eqSchoolCode } </if> 
<if test=" 1 eq 1 and model['neqSchoolCode'] neq null">and main.SCHOOL_CODE != #{model.neqSchoolCode } </if> 
<if test=" 1 eq 1 and model['isnullSchoolCode'] neq null and model['isnullSchoolCode'] eq true">and main.SCHOOL_CODE is null  </if> 
<if test=" 1 eq 1 and model['isnotnullSchoolCode'] neq null and model['isnotnullSchoolCode'] eq true">and main.SCHOOL_CODE is not null </if> 
<if test=" 1 eq 1 and model['isinSchoolCode'] neq null">and main.SCHOOL_CODE in <foreach collection="model.isinSchoolCode" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['isnotinSchoolCode'] neq null">and main.SCHOOL_CODE not in <foreach collection="model.isnotinSchoolCode" item="sub" open="(" separator="," close=")"> #{sub } </foreach> </if> 
<if test=" 1 eq 1 and model['likeSchoolCode'] neq null">and main.SCHOOL_CODE like #{model.likeSchoolCode} </if> 
<if test=" 1 eq 1 and model['notlikeSchoolCode'] neq null">and main.SCHOOL_CODE not like #{model.notlikeSchoolCode  } </if> 


</sql>


<select id="select" resultType="ArrayList" resultMap="resultMap">
	select <include refid="queryCols"/>  from <include refid="table"/>  main   
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
	<include refid="orderby"/>
</select>

<select id="selectUnion" resultType="ArrayList" resultMap="resultMap">
  select  main.* from (
	<trim  prefixOverrides="union" suffixOverrides="union">
		<foreach collection="querys" item="model">
			<if test="model neq null">
				union select <include refid="queryCols" /> from <include refid="table"  /> main 
					<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
						<include refid="selectCondition"/>
					</trim>
			</if>
		</foreach>
	</trim>
   ) main 
<include refid="orderby"/>
</select>

<select id="selectEqPk"  resultMap="resultMap">
	select <include refid="queryCols"/> from <include refid="table"/> main  where <include refid="pk"/> = #{pk}
</select>

<select  id="selectAll"  resultType="ArrayList"  resultMap="resultMap">
	select <include refid="queryCols"/> from  <include refid="table"/> main  
	<include refid="orderby"/>
</select>

<select id="countAll" resultType="int">
	select count(<include refid="pk"/>) from <include refid="table"/> 
</select>

<select id="count" resultType="int">
	select count(<include refid="pk"/>) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="avg" resultType="int">
	select avg(${column}) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="sum" resultType="int">
	select sum(${column}) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="min" resultType="int">
	select min(${column}) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<select id="max" resultType="int">
	select max(${column}) from <include refid="table"/>
		<if test="model neq null" >
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectCondition"/>
		</trim>
		</if>
</select>

<insert id="insert" flushCache="true" >
	insert into <include refid="table"/> main  ( <include refid="columns"/> ) values  
	(
		<trim  prefixOverrides="," suffixOverrides=",">
			<include refid="insertCols"/>
		</trim>
	)
</insert>

<update id="update" flushCache="true" >
	update <include refid="table"/> main  set 
		<trim  prefixOverrides="," suffixOverrides=",">
			<include refid="updateCols"/>
		</trim>
	where main.<include refid="pk"/>=#{model.Id,jdbcType=VARCHAR}
</update>

<delete id="deleteEqPk" flushCache="true">
	delete from <include refid="table"/>  where <include refid="pk"/> =#{pk}
</delete>

<delete id="deleteInPk" flushCache="true">
	delete from <include refid="table"/> where <include refid="pk"/> in
		<foreach item="pk" collection="pks" open="(" separator="," close=")">#{pk}</foreach>
</delete>

<select id="selectView" resultType="ArrayList" resultMap="resultView">
	select <include refid="columns"/>  <include refid="joinCols"/> from <include refid="table" /> main <include refid="join"/> 
		<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
			<include refid="selectViewCondition"/>
		</trim>	<include refid="orderby"/>
</select>

<select id="selectViewUnion" resultType="ArrayList" resultMap="resultView">
  select main.* from (
	<trim  prefixOverrides="union" suffixOverrides="union">
		<foreach collection="querys" item="model">
			<if test="model neq null">
				union select <include refid="queryCols"/> <include refid="joinCols"/> from <include refid="table"/> main  <include refid="join"/> 
					<trim prefix="where 1=2 or (" suffix=")" prefixOverrides="and|or" suffixOverrides="and|or">
						<include refid="selectViewCondition"/>
					</trim>
			</if>
		</foreach>
	</trim>
  ) main 

<include refid="orderby"/>
</select>

<select id="selectViewEqPk"  resultMap="resultView">
	select <include refid="queryCols"/> <include refid="joinCols"/>  from <include refid="table"/> main <include refid="join"/> where main.<include refid="pk"/> = #{pk}
<include refid="orderby"/>
</select>

<select  id="selectViewAll"  resultType="ArrayList"  resultMap="resultView">
	select  <include refid="queryCols"/> <include refid="joinCols"/> from  <include refid="table"/> main <include refid="join"/>
	<include refid="orderby"/>
</select>

</mapper>